package aidhkm.dhkm16a1hn.service;

import aidhkm.dhkm16a1hn.model.Document;
import aidhkm.dhkm16a1hn.repository.DocumentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.logging.Logger;

/**
 * Service d√πng chung cho vi·ªác x·ª≠ l√Ω n·ªôi dung file
 * ƒê∆∞·ª£c s·ª≠ d·ª•ng b·ªüi c·∫£ TextService v√† PDFService
 */
@Service
public class FileProcessingService {
    private static final Logger logger = Logger.getLogger(FileProcessingService.class.getName());
    private static final int MAX_SEGMENTS_PER_DOCUMENT = 1000; // Gi·ªõi h·∫°n s·ªë segment t·ªëi ƒëa cho m·ªói t√†i li·ªáu

    @Autowired private DocumentRepository documentRepository;
    @Autowired private VectorService vectorService;
    @Autowired private NLPService nlpService;

    /**
     * X·ª≠ l√Ω n·ªôi dung vƒÉn b·∫£n v√† t·∫°o embedding
     * @param content N·ªôi dung vƒÉn b·∫£n
     * @param documentName T√™n t√†i li·ªáu
     * @return S·ªë l∆∞·ª£ng ƒëo·∫°n vƒÉn b·∫£n ƒë√£ x·ª≠ l√Ω
     */
    public int processTextContent(String content, String documentName) {
        try {
            // Ph√¢n ƒëo·∫°n vƒÉn b·∫£n
            List<String> segments = nlpService.segmentText(content);
            logger.info("Split text into " + segments.size() + " segments");
            
            if (segments.isEmpty()) {
                return 0;
            }
            
            // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng segment ƒë·ªÉ tr√°nh qu√° t·∫£i khi file l·ªõn
            if (segments.size() > MAX_SEGMENTS_PER_DOCUMENT) {
                logger.warning("Document has too many segments (" + segments.size() + 
                    "), limiting to " + MAX_SEGMENTS_PER_DOCUMENT);
                segments = segments.subList(0, MAX_SEGMENTS_PER_DOCUMENT);
            }
            
            int segmentCount = 0;
            
            // L∆∞u document v√†o database tr∆∞·ªõc
            Document document = new Document();
            document.setName(documentName);
            document.setContent(content);
            documentRepository.save(document);
            Long docId = document.getId();
            
            logger.info("Saved document to database with ID: " + docId);
            
            // T·∫°o danh s√°ch embedding vectors ƒë·ªÉ l∆∞u h√†ng lo·∫°t
            List<aidhkm.dhkm16a1hn.model.EmbeddingVector> batchVectors = new java.util.ArrayList<>();
            
            // T·∫°o embedding cho t·ª´ng ƒëo·∫°n
            for (String segment : segments) {
                if (segment.trim().isEmpty()) {
                    continue;
                }
                
                // T·∫°o embedding vector
                float[] embedding = vectorService.createEmbedding(segment);
                if (embedding != null) {
                    // Chu·∫©n b·ªã entity ƒë·ªÉ l∆∞u batch
                    aidhkm.dhkm16a1hn.model.EmbeddingVector embeddingVector = new aidhkm.dhkm16a1hn.model.EmbeddingVector();
                    embeddingVector.setDocumentId(docId);
                    embeddingVector.setSegment(segment);
                    embeddingVector.setVectorData(embedding);
                    batchVectors.add(embeddingVector);
                    segmentCount++;
                }
            }
            
            // L∆∞u t·∫•t c·∫£ vector c√πng m·ªôt l√∫c
            if (!batchVectors.isEmpty()) {
                vectorService.saveEmbeddingVectors(batchVectors);
                vectorService.invalidateVectorsCache(); // üëà Th√™m d√≤ng n√†y
                logger.info("Saved " + batchVectors.size() + " vectors for document ID: " + docId);
            }

            logger.info("Successfully processed content. Created " + segmentCount + " embeddings");
            return segmentCount;
            
        } catch (Exception e) {
            logger.severe("Error processing content: " + e.getMessage());
            e.printStackTrace();
            return 0;
        }
    }
} 